substitutions:
  device_name: Weather Station
  name: weather-station-cd9164

esphome:
  name: ${name}
  comment: ${device_name}
  friendly_name: ${device_name}
  name_add_mac_suffix: false
  project:
    name: "l7ssha.weather-station"
    version: "2.0"

dashboard_import:
  package_import_url: github://l7ssha/esphome/weather-station.yaml
  import_full_config: false

esp32:
  board: upesy_wroom
  framework:
    type: arduino

logger:

api:

ota:

wifi:
  ap:
    ssid: "${name} Hotspot"
    password: "${name}"

captive_portal:

i2c:
  sda: 22
  scl: 23

bme680_bsec:
  address: 0x77

sensor:
  - platform: bme680_bsec
    temperature:
      name: "BME680 Temperature"
      id: bme680_temp
    pressure:
      name: "BME680 Pressure"
      id: bme680_pressure
    humidity:
      name: "BME680 Humidity"
      id: bme680_humidity
    iaq:
      name: "BME680 Indoor Air Quality"
      id: iaq
    co2_equivalent:
      name: "BME680 CO2 Equivalent"
    breath_voc_equivalent:
      name: "BME680 Breath VOC Equivalent"

  - platform: dht
    pin: GPIO18
    model: DHT22
    temperature:
      name: "DHT22 Temperature"
      accuracy_decimals: 2
      id: dht_temp
    humidity:
      name: "DHT22 Humidity"
      accuracy_decimals: 2
      id: dht_humidity
    update_interval: 60s

  # - platform: dps310
  #   temperature:
  #     name: "DPS310 Temperature"
  #     accuracy_decimals: 2
  #     id: dps310_temp
  #   pressure:
  #     name: "DPS310 Pressure"
  #     accuracy_decimals: 2
  #     id: dps310_pressure
  #   address: 0x76
  #   update_interval: 60s

  - platform: absolute_humidity
    name: Absolute Humidity
    temperature: package_temperature
    humidity: package_relative_humidity

  - platform: template
    name: "Dew Point"
    lambda: |-
      return (243.5*(log(id(package_relative_humidity).state/100)+((17.67*id(package_temperature).state)/
      (243.5+id(package_temperature).state)))/(17.67-log(id(package_relative_humidity).state/100)-
      ((17.67*id(package_temperature).state)/(243.5+id(package_temperature).state))));
    unit_of_measurement: °C
    icon: 'mdi:thermometer-alert'
    accuracy_decimals: 2
    update_interval: 60s
    device_class: temperature
    state_class: measurement

  - platform: template
    name: "Equivalent sea level pressure"
    lambda: |-
      const float STANDARD_ALTITUDE = 195; // in meters, see note
      return id(package_pressure).state / powf(1 - ((0.0065 * STANDARD_ALTITUDE) /
        (id(package_pressure).state + (0.0065 * STANDARD_ALTITUDE) + 273.15)), 5.257); // in hPa
    update_interval: 60s
    unit_of_measurement: 'hPa'
    accuracy_decimals: 2
    device_class: pressure
    state_class: measurement
    id: sea_air_pressure

  - platform: template
    name: "Heat Index"
    lambda: |-
      float temp = id(package_temperature).state;
      float rh = id(package_relative_humidity).state;

      auto e_value = rh * 0.06105 * exp((17.27 * temp) / (237.7 + temp));
      return temp + 0.348 * e_value - 4.25;
    update_interval: 60s
    state_class: measurement
    device_class: temperature
    unit_of_measurement: "°C"
    accuracy_decimals: 2

  - platform: tsl2591
    name: "TSL2591"
    address: 0x29
    update_interval: 60s
    gain: auto
    device_factor: 53
    glass_attenuation_factor: 14.4
    visible:
      name: "TSL2591 visible light"
    infrared:
      name: "TSL2591 infrared light"
    full_spectrum:
      name: "TSL2591 full spectrum light"
    calculated_lux:
      id: tsl2591_lux
      name: "TSL2591 Lux"
    actual_gain:
      id: "actual_gain"
      name: "TSL2591 actual gain"

  - platform: ltr390
    uv:
      name: "LTR390 UV Counts"
    uv_index:
      name: "LTR390 UV Index"
    light:
      name: "LTR390 Light"
      id: ltr390_lux

  - platform: template
    name: "Package Temperature"
    id: package_temperature
    device_class: temperature
    state_class: measurement
    unit_of_measurement: "°C"
    icon: "mdi:thermometer-lines"
    lambda: |-
      return (
        //id(dht_temp).state +
        //id(dps310_temp).state +
        id(bme680_temp).state
      ) / 1;
    update_interval: 60s

  - platform: template
    name: "Package Relative Humidity"
    unit_of_measurement: "%"
    id: package_relative_humidity
    icon: "mdi:cloud-percent-outline"
    device_class: humidity
    state_class: measurement
    lambda: |-
      return (
        //id(dht_humidity).state +
        id(bme680_humidity).state
      ) / 1;
    update_interval: 60s
      
  - platform: template
    name: "Package Pressure"
    unit_of_measurement: "hPa"
    icon: "mdi:gauge-full"
    id: package_pressure
    device_class: pressure
    state_class: measurement
    lambda: |-
      return (
        //id(dps310_pressure).state +
        id(bme680_pressure).state
      ); /// 2;
    update_interval: 60s
  
  - platform: template
    name: "Package Lux"
    unit_of_measurement: "lx"
    icon: "mdi:weather-sunny"
    device_class: illuminance
    id: package_lux
    lambda: |-
      return (
        id(ltr390_lux).state +
        id(tsl2591_lux).state
      ) / 2;
    state_class: measurement 

  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: uptime
    name: Uptime
    entity_category: "diagnostic"
  
  - platform: internal_temperature
    name: "Internal Temperature"
    update_interval: 60s
    entity_category: "diagnostic"

button:
  - platform: factory_reset
    name: "Restart with Factory Default Settings"
    entity_category: "config" 

  - platform: restart
    name: "Restart"
    entity_category: "config"

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "IP Address"
    ssid:
      name: "Connected SSID"
    mac_address:
      name: "Mac Address"
  
  - platform: bme680_bsec
    iaq_accuracy:
      name: "BME680 IAQ Accuracy"

  - platform: template
    name: "BME680 IAQ Classification"
    icon: "mdi:checkbox-marked-circle-outline"
    update_interval: 60s
    lambda: |-
      if (int(id(iaq).state) <= 50) {
        return {"Excellent"};
      }
      else if (int(id(iaq).state) <= 100) {
        return {"Good"};
      }
      else if (int(id(iaq).state) <= 150) {
        return {"Lightly polluted"};
      }
      else if (int(id(iaq).state) <= 200) {
        return {"Moderately polluted"};
      }
      else if (int(id(iaq).state) <= 250) {
        return {"Heavily polluted"};
      }
      else if (int(id(iaq).state) <= 350) {
        return {"Severely polluted"};
      }
      else if (int(id(iaq).state) <= 500) {
        return {"Extremely polluted"};
      }
      else {
        return {"unknown"};
      }
