substitutions:
  device_name: Office Desk
  name: office-desk
  min_height: "71.6" # Min height + 0.1
  max_height: "120.9" # Max height - 0.1

esphome:
  name: ${name}
  comment: ${device_name}
  friendly_name: ${device_name}
  name_add_mac_suffix: true
  project:
    name: l7ssha.office-desk
    version: "1.0"
  includes:
    - desk_height_sensor.h
    - desk_keypad.h
  on_boot:
    priority: -10
    then:
      - button.press: button_m

dashboard_import:
  package_import_url: github://l7ssha/esphome/desk-v2.yaml@main
  import_full_config: false

esp32:
  board: upesy_wroom
  framework:
    type: arduino

wifi:
  power_save_mode: none
  ap:
    ssid: "${name} Hotspot"
    password: "${name}"


captive_portal:

logger:

api:

ota:

uart:
  - id: desk_uart
    baud_rate: 9600
    tx_pin: 5
    rx_pin: 18
  - id: keypad_uart
    baud_rate: 9600
    tx_pin: 3
    rx_pin: 21

sensor:
  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 60s

  - platform: uptime
    name: Uptime
  
  - platform: custom
    lambda: |-
      auto desk_height_sensor = new DeskHeightSensor(id(desk_uart));
      App.register_component(desk_height_sensor);
      return {desk_height_sensor};
    sensors:
      id: "desk_height"
      name: Desk Height
      unit_of_measurement: cm
      accuracy_decimals: 1
      icon: "mdi:counter"
      state_class: "measurement"
      on_value_range:
      - below: ${min_height}
        then:
          - switch.turn_off: switch_down
      - above: ${max_height}
        then:
          - switch.turn_off: switch_up
      on_value:
        then:
          - cover.template.publish:
              id: desk_cover
              position: !lambda |-
                  // The sensor outputs values from min_height (cm) to max_height (cm)
                  // We need to translate this to 0 - 1 scale.
                  float position = (float(x) - float(${min_height})) / (float(${max_height}) - float(${min_height}));
                  return position;
  
  - platform: custom
    lambda: |-
      auto desk_keypad_sensor = new DeskKeypad(id(keypad_uart));
      App.register_component(desk_keypad_sensor);
      return {desk_keypad_sensor};
    sensors:
      id: "desk_command"
      name: Desk command
      icon: "mdi:counter"
      on_value:
        then:
          lambda: |-
            auto state = id(desk_command).state;
            if(state == 3)
            {
              id(preset_1_button).press();
            } 
            else if (state == 4) 
            {
              id(preset_2_button).press();
            } 
            else if (state == 5) 
            {
              id(preset_3_button).press();
            } 
            else if (state == 9) 
            {
              id(preset_4_button).press();
            }
            else if (state == 1) 
            {
              id(button_up).press();
            }
            else if (state == 2)
            {
              id(button_down).press();
            }
            else if (state == 6) {
              id(button_m).press();
            }
              
switch:
  - platform: gpio
    name: "Virtual Screen"
    pin:
      number: GPIO23
      mode: OUTPUT
    restore_mode: ALWAYS_ON
    entity_category: "config"
    internal: true

  - platform: uart
    name: "Up"
    id: switch_up
    icon: mdi:arrow-up-bold
    data: [0x9b, 0x06, 0x02, 0x01, 0x00, 0xfc, 0xa0, 0x9d]
    uart_id: desk_uart
    send_every: 108ms

  - platform: uart
    name: "Down"
    id: switch_down
    icon: mdi:arrow-down-bold
    data: [0x9b, 0x06, 0x02, 0x02, 0x00, 0x0c, 0xa0, 0x9d]
    uart_id: desk_uart
    send_every: 108ms

  - platform: uart
    name: "Alarm off"
    id: switch_alarm
    icon: mdi:alarm
    data: [0x9b, 0x06, 0x02, 0x40, 0x00, 0xAC, 0x90, 0x9d]
    uart_id: desk_uart
    send_every: 108ms
    on_turn_on:
      - delay: 3000ms
      - switch.turn_off: switch_alarm
    entity_category: "config"

  - platform: uart
    name: "Child Lock"
    id: switch_child_lock
    icon: mdi:account-lock
    data: [0x9b, 0x06, 0x02, 0x20, 0x00, 0xac, 0xb8, 0x9d]
    uart_id: desk_uart
    send_every: 108ms
    on_turn_on:
      - delay: 5000ms
      - switch.turn_off: switch_child_lock
    entity_category: "config"

button:
  - platform: template
    name: "Preset 1"
    icon: mdi:numeric-1-box
    id: preset_1_button
    on_press:
      - uart.write:
          id: desk_uart
          data: [0x9b, 0x06, 0x02, 0x04, 0x00, 0xac, 0xa3, 0x9d] 

  - platform: template
    name: "Preset 2"
    icon: mdi:numeric-2-box
    id: preset_2_button
    on_press:
      - uart.write:
          id: desk_uart
          data: [0x9b, 0x06, 0x02, 0x08, 0x00, 0xac, 0xa6, 0x9d]

  - platform: template
    name: "Sit" # Preset 4
    icon: mdi:chair-rolling
    id: preset_4_button
    on_press:
      - uart.write:
          id: desk_uart
          data: [0x9b, 0x06, 0x02, 0x00, 0x01, 0xac, 0x60, 0x9d]

  - platform: template
    name: "Stand" # Preset 3
    icon: mdi:human-handsup
    id: preset_3_button
    on_press:
      - uart.write:
          id: desk_uart
          data: [0x9b, 0x06, 0x02, 0x10, 0x00, 0xac, 0xac, 0x9d]

  - platform: template
    name: "Memory"
    id: button_m
    icon: mdi:alpha-m-box
    entity_category: "config"
    on_press:
      - uart.write:
          id: desk_uart
          data: [0x9b, 0x06, 0x02, 0x20, 0x00, 0xac, 0xb8, 0x9d]

  - platform: template
    name: "Wake Screen"
    id: button_wake_screen
    icon: mdi:gesture-tap-button
    entity_category: "config"
    on_press:
      - uart.write:
          id: desk_uart
          data: [0x9b, 0x06, 0x02, 0x00, 0x00, 0x6c, 0xa1, 0x9d]

  - platform: template
    name: "Alarm"
    id: button_alarm
    icon: mdi:alarm
    on_press:
      - uart.write:
          id: desk_uart
          data: [0x9b, 0x06, 0x02, 0x40, 0x00, 0xAC, 0x90, 0x9d]

  - platform: restart
    name: "Restart"
    entity_category: "config"

  - platform: template
    name: "Up Button"
    id: button_up
    icon: mdi:arrow-up-bold
    on_press:
      - uart.write:
          id: desk_uart
          data: [0x9b, 0x06, 0x02, 0x01, 0x00, 0xfc, 0xa0, 0x9d]
  
  - platform: template
    name: "Down Button"
    id: button_down
    icon: mdi:arrow-down-bold
    on_press:
      - uart.write:
          id: desk_uart
          data: [0x9b, 0x06, 0x02, 0x02, 0x00, 0x0c, 0xa0, 0x9d]

cover:
  - platform: template
    id: "desk_cover" 
    icon: mdi:desk
    name: "Desk"
    device_class: blind
    has_position: true
    position_action:
      - logger.log:
          format: "Requesting position change to: %f "
          args: [ 'pos' ]
      - if:
          condition:
            - lambda: !lambda |-
                return pos > id(desk_cover).position;
          then:
            - logger.log: "Position should move up"
            - cover.open: desk_cover
            - wait_until:
                lambda: |-
                  return id(desk_cover).position >= (pos - 3);
            - cover.stop: desk_cover
          else:
            - logger.log: "Position should move down"
            - cover.close: desk_cover
            - wait_until:
                lambda: |-
                  return id(desk_cover).position <= (pos + 3);
            - cover.stop: desk_cover
    stop_action:
      - switch.turn_off: switch_up
      - switch.turn_off: switch_down
    open_action:
      - switch.turn_off: switch_down
      - switch.turn_on: switch_up    
    close_action:
      - switch.turn_off: switch_up
      - switch.turn_on: switch_down
    optimistic: false

number:
  - platform: template
    name: "Desk Height"
    id: set_desk_height
    min_value: ${min_height}
    max_value: ${max_height}
    icon: "mdi:counter"
    unit_of_measurement: "cm"
    device_class: "distance"
    step: 0.1
    lambda: !lambda |-
      return id(desk_height).state;
    update_interval: 0ms
    set_action:
      - logger.log:
          format: "Requesting position change to: %x "
          args: [ 'x' ]
      - if:
          condition:
            - lambda: !lambda |-
                return x > id(desk_height).state;
          then:
            - logger.log: "Position should move up"
            - cover.open: desk_cover
            - wait_until:
                lambda: |-
                  return id(desk_height).state >= (x - 3);
            - cover.stop: desk_cover
          else:
            - logger.log: "Position should move down"
            - cover.close: desk_cover
            - wait_until:
                lambda: |-
                  return id(desk_height).state <= (x + 3);
            - cover.stop: desk_cover
